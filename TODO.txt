Review of series
    To clear cache after changes (to refresh cached data of categories from appservice):
    php artisan cache:clear
1. part - SETUP
    - database/factories is used for generating test objects with tinker: factory('App\Thread', 5)->create()
    - php artisan make:model Reply -mr creates migration and resourceful controller, normal controller is -c

2. part - TEST FOR FEATURES - created ThreadsTest

    - run test with phpunit
    - in phpunit.xml change values on bottom... add DB_CONNECTION value=sqlite and DB_DATABASE value=:memory:
    - add use DatabaseMigrations in class (because of sqlite)
    - FEATURE is high level test
    - UNIT test is lower level, for such as testing if reply has an owner
    - Difference is, UNIT test return exact error, features do not
    - php artisan make:test ReplyTest --unit
    - for UNIT call: phpunit test/Unit/ImeTesta.php
    - rerun php artisan serve after any change in .env file or databases!
    - for test, you should use another database/ sqlite.. which works in memory, doesnt create real DB
    - tests/Feature - create file, that looks like ExampleTest.php and function names start with test_
    - add DatabaseMigrations trait, and use it in class. it creates migration and rolls back after tests end

    - In view, when linking to a model, thread, anything... use Model function path()
    - instead full path in view, just call href= "{{ $thread->path() }}"

3. part testing (for authenticated users)
    - to log in a user in test, use $this->be($user);
    - To test only 1 function: phpunit --filter name_of_test_function
    - bug, post vrne OK tudi v primeru errorja... dodaš in handler.php add to render function : if(app()->environment() === 'testing') throw $exception;
    - $this->assertCount(1, $this->thread->replies); assertCount prešteje št. objektov

6. part (User posting threads form)
    - instead of $this->be($user), can use $this->actingAs($user)
    - $thread = factory('App\Thread')->raw() returns an array instead of using ->make() and casting $thread->toArray();
    -TODO FIX authenticated_user_can_create_thread()

7. part Testing helpers- creating utilities folder and functions.php file to refactor code
    - composer.json in "autoload-dev" section add: "files" : ["tests/utilities/functions.php"]
    - that will only be used for development
    - composer dump-autoload after adding helper functions
    - signIn function created in TestCase.php file
    - use DatabaseMigrations;

8. part with Exception handling
    - solved problem with tests throwing exceptions instead of returning OK, by adding functions from https://gist.github.com/adamwathan/125847c7e3f16b88fa33a9f8b42333da
    to TestCase.php file
    - automatically disables exception handling
    - example: $this->withExceptionHandling()->signIn();
    - now can delete this line from Handler.php ->
    -> if(app()->environment() === 'testing') throw $exception;

9. part
    - php artisan migrate:refresh
    - php artisan tinker . . . .  factory('App\Thread', 5)->create()
    - to persist(keep) object in test, use create, not make
    - assertRedirect('/login') checks, if request will result in redirect to given path

10. part Testing form validation errors
    - tests/Feature/CreateThreadsTest.php
    - offtopic: fixed authenticated_user_can_create_thread() function, after: make, check response->headers->get('Location')
    - tests for testing validation of creating threads: - a_thread_requires_a_title()
    -   ->assertSessionHasErrors('title'); checks if request returned an error for title input
    - split function a_thread_requires_a_title into two functions + publishThread, which overrides a make function with custom params
    - a_thread_requires_a_body and valid_category uses same function publishThread with diff. params
    - 'category_id' => 'required|exists:categories,id'

11. part Filtering threads by Category
    - renamed ThreadsTest.php to ReadThreadsTest.php
    - created new test in Feature/ReadThreadsTest ->
    -> a_user_can_filter_threads_by_tag, checking if a certain category:
    - will show right subthreads by using   ->assertSee($threadInCategory->title)
    - and wont show wrong ones   ->assertDontSee($threadNotInCategory->title)
    following is used to search categories by slug instead id
    public function getRouteKeyName()
    {
        return 'slug';
    }
    - created UnitTest CategoryTest to check if it has threads
    - created dropdown kategorije

12. part Adding category input to Add thread form
    - form validation
    - displaying errors
    - select-option input for categories
    - old value on form submit

13. part Extracting View Composers for DATA,
    that is used in multiple views- QUERY JUST ONCE, tackle N+1 problem
    (for example categories and user in navigation header)
    - add code to ServiceProvider, in boot function -> https://laravel.com/docs/5.4/views#view-composers
    - can extract code to ServiceProviders-> php artisan make:provider ViewServiceProvider

14. part filtering by Users, adding QUERY STRING URI = /threads?by=JohnDoe
    -test in /features/ReadThreadsTest.php, creating two threads, one by auth user, other random
    - a_user_can_filter_threads_by_username

15. part REFACTORING ThreadController
    1. way - extract querries to a method in controller- getThreads(Category $category) ->
    -> usage: $threads = $this->getThreads($category);

    2. way - extract to a new class that creates a query object -> App\Queries\ThreadsQuery.php
    -> usage: $threads = (new ThreadsQuery)->get();

    3. HARD way - create filtering class -> App\Filters\ThreadFilters.php
    - in controller index add ThreadFilters $filters param
    - add function scopeFilter($query, $filters) to Thread model
    - create abstract class Filters.php that will be extended by other classes (UserFilters, ThreadFilters...)
    - it contains functions used by all subclasses
    - threadFilters has a protected $filters = ['by', 'popular', 'new'] array,
    -> which declares all possible filters which are also stored as functions in same class

//TODO: Refactor Pixtr according to part 15 and 16 from this series
// TODO: use policies on pixtr- part 24
// TODO: add socialite to existing auth

16. part REPLIES COUNT FOR EVERY THREAD, sidebar with meta details on threads, pagination
    - add GLOBAL QUERY SCOPE to Thread class, protected static function boot()
    - GLOBAL QUERY SCOPE runs automatically if in Model boot()
    - $thread->replies_count

17. part Filter threads by popular
    - in Feature/ReadThreadsTest.php user_can_filter_threads_by_popular()
    - using $response = $this->getJson('/threads?popular=1')->json();
    - in threadController index if (request()->wantsJson()) {
            return $threads;
      }
    - for debugging, call $threads->toSql(), before using ->get(), to debug query
    - in popular, $this->builder->getQuery()->orders = []; removes the latest() from query builder

18.part Favorite replies ( 'favorited_type' => get_class($reply) allows to favorite anything)
    - Feature/FavoriteTest.php
    - /replies/id/favorite
    - pivot table favorites -> Reply has function favorites with $this->morphMany('App\Favorite', 'favorited_id')
    - in migrations file $table->unique(['user_id', 'favorited_id', 'favorited_type']) will force only one favorite per item;

19. part Favorite Button form
    - using class flex and level

20. part DEBUGBAR to fix eager load
    install steps:
    - 1. composer require...
    - 2. add service provider to AppService register function -
        if($this->app->isLocal()) { ... }

    -eager load
    - to load categories only once: in AppService... boot()
     \View::composer('*', function ($view) {
                 $categories = \Cache::rememberForever('categories', function() {
                     return Category::all();
                 });

                 $view->with('categories', $categories);
     }

21. part GLOBAL SCOPE QUERY REDUCTION (for reply owner, count favorite, comment)
    -> $with = ['likes', 'owner'] .... ! to automatically eager load any necessary relationships.
    - do it by declaring boot() in Reply model or protected $with = ['owner'];
    - extracted code for favoriting from Reply to  Favorable trait, Can be used with threads also!

22. part User profiles
    - Features/ProfilesTest.php
    - in views, use $profileUser, since $user can be used as authenticated user, shared in all views!

23. part Delete thread with test,
    - test: $this->json('DELETE', $thread->path());
    - $this->assertDatabaseMissing('threads', $thread->toArray());
    - in destroy function $thread->replies()->delete();
             $thread->delete();
    - in form use {{ method_field('DELETE' }}
    - to do multiple queries and rollback if fail use \DB::transaction(function() use ($thread) {


24. part Authorization with policy
    - php artisan make:policy ThreadPolicy --model=Thread to include basic "CRUD"
    - after creating, you need to register it in AuthServiceProvider. read documentation
    - https://laravel.com/docs/5.4/authorization#policy-methods
    - USAGE: In controller, do $this->authorize('update', $thread); will abort with error 403 if false
    - in view, use @can('delete', $thread) and @endcan, instead of Auth::check() etc..
    - to authorize ADMIN for a policy class, create method before(), that authorizes all action within a given policy
    - to authorize ADMIN for WHOLE APP, use Gate as in example (documentation). declare it in AuthServiceProvider
    -> boot method-> Gate::before(function($user) {
                        if ($user->name == 'miha'){
                            return true;
                        }
                     });
    - policies should be used when you wish to authorize an action for a particular model or resource

    - instead of if(count($replies)) and foreach loop, use @forelse and @empty instead of else
    - $this->delete($thread->path())->assertStatus(403) when expecting error code on request;
    - to throw error, do abort( 400, 403, any status code, and 'message with it';
    -> funct unauthorized_user_cant_delete_threads

25. part Creating Activity feed- log- diary
    - when you create thread/reply, you also create a record in activities table
    - Unit/ActivityTest.php
    - created table 'activities'
    - make:model Activity -m to add migration
    - unsignedInteger is foreign key that will always be >0
    - get_class($thread)
    - extract Activity to Traits/RecordsActivity
    -!!!!! static function bootNameOfTrait will make trait automatically load on actions inside boot (create, delete...)
    - anything you want to save to activities, put in getEventsForRecord

26. part Polymorphism Creating activity feed view with component and slot
    - basic polymorphism = extracting unique logic to partials
    - @include("profiles.activities.{$activity->type}")
    - calling files based on type of activity
    - groupBy date, in view using double for loop
    - using component for rendering views - profiles.activities.activity is a template
    - created reply and thread use that component and two slots, heading and body
    - limit query results with ->take(10) instead of limit
    - extract activity feed to static method in Activity model

27. part Writing test for activity feed
    - extract activity feed to static method in Activity model
    - Activity::getUserActivity($user) accepts user and returns his feed to profileController show method
    - Carbon::now()->subWeek() return a week old date

28. part fix bug and test on activity delete
    - in RecordsActivity added static::deleting() in bootRecordsActivity, to listen for delete requests
    -  to delete all replies for a thread use  $thread->replies->each->delete();
    - test that there are 0 records in activity table
    - $this->assertEquals(0, Activity::count());

29. part Vue.js flash messaging Flash.vue
    - vue files are stored in resources/assets/js/components folder
    - npm install
    -> install all dependencies from package.json
    - resources/assets/app.js is main file, contains imports (by default imports bootstrap)
    - bootstrap by default imports axios, jquery..
    - includes global vue component - Example.vue
    - after changes, use this
    -> npm run dev, to compile everything
    -> npm run watch

    -VUE logic
    - vue file can contain <template> <script> and <style>
    - <flash> component in layouts/app
    - v-show can be set to true or false
    - function methods, data, created.
    - hide or show after 3 seconds
        setTimeout(() => {
             this.show = false;
        }, 3000);
    - in bootstrap.js, register listener for session('flash')

30.part added activity feed for FAVORITE
    - morphTo relationship
    - added Favorited to reply (return object)
    - added #id to every reply, and routing directly to it from feed

31. part Authorized Users Can Delete Reply
    - created ReplyPolicy for Reply model
    - with tests

32. VUE reply component
    - edit reply with inline value of text
    - <reply inline-template>
    - create Reply.vue file
    - register it in app.js
    -> Vue.component('reply', require('./components/Reply.vue'));
    - v-if="editing" v-else to show and hide div
    - @onclick="editing = true"
    - data property called editing, manipulate its value from false to true to show textarea
    - to send data to vue, in <reply> component, include :atributes="{{ $reply }}" : turns it into JSON
    - to accept attributes in reply instance, use props: ['attributes'], it receives all data passed trough reply component
    - v-model='body'
    - on button @click="update" calls method from reply.vue component
    - use axios library to submit patch request to given endpoint and send updated body
    - test authorized_users_can_update_replies() and cant, checking for redirects, 403 or success
    - v-text used to set value of html tag
    - !! to hide popup of hidden inputs etc. on load !!
    - !! give component a value v-cloak and in style: [v-cloak] { display: none}
    - once everything is loaded, vue will remove v-cloak value

33. ajax Vue delete button
    - button @click="destroy"
    - axios.delete
    - in Reply destroy function, if request()->expectsJson() return response(['status' => 'odgovor izbrisan.']);
    - after it's deleted, with jquery hide - $(this.$el).fadeOut(300), and flash msg after its deleted;

34. ajax Vue favorite component
    - dedicated component Favorite that is child of Reply component
    - import favorite component in Reply.vue and specify it as a child component ->
    - components: { Favorite }
    -how to display property
    -> use getFavoritesCountAttribute from Favorable and
    -> protected $appends = ['favoritesCount'] in Reply, to add it to array on every load
    - use it, to display number of likes on every reply in Vue...
    - to declare class of button- liked, unliked, give button custom :class="classes", : means its computed in script part  ->
    - computed: { classes() { .... }

35. fixing bugs with activity feed when unfavorite reply
    - instead         $this->favorites()->where($attributes)->delete();
    - use $this->favorites()->where($attributes)->get()->each(function($favorite) {
                      $favorite->delete();
                  });
    - or $this->favorites()->where($attributes)->get()->each->delete();
    - you must delete a model, not just perform a sql query with query builder

    fixing when you favorite a reply, and a reply gets deleted
    - in trait favorable
        protected static function bootFavorable()
            {
                static::deleting(function ($model) {
                   $model->favorites->each->delete();
                });
            }

36. Data-centric Approach
    $emit -- dispatches the event upwards through the scope hierarchy.
    - Reply is child of Replies, using events -> $emit will comunicate to parents, $broadcast will comunicate downwards
    - parents pass down data to child with :data= value example in replies, <reply data="reply"></reply>
    - @deleted='remove(index)' in parent, parent listents to $emit from child @deleted is action
    - when deleted, $emit to parent -> this.$emit('deleted', this.data.id);
    - 1. param, 'deleted' specifies the action
    - refactoring code around vue
    - creating replies component in threads/show view
    - Replies.vue contains Reply.vue
    <div v-for="(reply, index) in items" :key="reply.id">
        <reply></reply>
    </div>
    -create pages/Thread.vue for single usage
    - inline template means it's part of blade view, but has script logic in seperate vue file
    -  components: { Replies }, declares child components used in template
    - took Reply component from inline to template in Reply.vue. fixed all laravel specific code
    refactoring fom lvl to vue
    - declare data in data() method by id: this.data.id ...
    - in view id="reply-{{ $reply->id }}" is :id="'reply-'+id"
    - automatic update replies count: <span v-text="repliesCount"></span> in view
    - in Thread.vue define repliesCount and props, pass data from view template with
    -> :initial-replies-count="{{ $thread->replies_count }}" in <thread-view>
    - when deleted, this.$emit('removed') in Replies.vue method
    -  @if(Auth::check()) put to js, go to app.blade
    - <script>
         window.Laravel = {!! json_encode([
             'csrfToken' => csrf_token(),
             'signedIn' => Auth::check(),
             'user' => Auth::user()
         ]) !!};
       </script>
    -in vue, <div v-if="signedIn">
    - computed: {
                 signedIn() {
                     return window.Laravel.signedIn;
                 }
             }
    - to share across all vue instances, use bootstrap and example
    Vue.prototype.authorize = function (handler) {
        //additional admin privileges
        return handler(window.Laravel.user);
    }

37. part creating New Reply Form
    - CSRF field is always applied as a header in ajax requests (check bootstrap.js)

38. part Vue Pagination
    - to fix the deletion of replies:
            <div v-for="(reply, index) in items" :key="reply.id">
    - every object needs a key with id
    - DATE FORMAT in vue - Moment.js library, same as carbon for laravel
    - change language :
           moment.locale('sl');
                    return moment(this.data.created_at).fromNow();

    - npm install moment --save
    - in Reply.vue import moment from 'moment';
    - how to SEND TIME TO TEMPLATE, COMPUTE it there, and SEND BACK to display:
    - in template send data getago="{{ $thread->created_at }}"
    - in vue,
     props: ['getago'],
     computed: {
                         postedAt() {
                             moment.locale('sl');
                             return moment(this.getago).fromNow();
                         },
                }
     -  to display <span v-text="postedAt"></span>

    -PAGINATION
    - paginator is a part of replies component, which determines data, url, refreshes data
    - creating custom pagination component with bootstrap
    - for axios pagination, you must do requests inside vue
    - from template remove data and in vue remove props: ['data'], instead make in methods:
         fetch() {
                axios.get(this.url)
                        .then(this.refresh);
          },
          refresh(response) {
          }
    - created() {
        this.fetch();
    }
    - in r/web create new route for ajax request of replies
    - Route::get('/threads/{category}/{thread}/replies', 'ReplyController@index');
    - test in ReadThreadsTest - user_can_request_all_replies_for_a_thread()
    - cause replies get requested by ajax, there is no need that controller neesd to load it too
    - add and remove were moved from replies.vue to mixins/Collection.js
    - in vue, MIXIN is same as trait in laravel
    - to enherit methods from collection file
        import collection from '../mixins/Collection.js'
        mixins: [collection],

    - created new component Paginator
    - to be used anywhere, declare it globally in app.js
    - dataSet for paginator is sent trough replies.vue, where <paginator>
    - in paginator, refresh dataset when it's updated. watch: { dataset() {
    - when click on next or previous, broadcast up to parent for update and update url
            page() {
                this.broadcast().updateUrl();
            }
            methods: broadcast() { this.$emit('updated', this.page);

39. Filtering threads by unanswered
    - test in readthreadstest.php
    - new ThreadFilter unanswered
    - in model thread, from boot() remove static:addglobalscope('replyCount'), instead put replies_count in database with threads
    - every time a reply is stored, column must be updated in threads table
    - easy solution, in addReply add
    ->  $this->increment('replies_count');
              return $reply;
    - but it works only when calling addReply, if created with factory wont ++
    - better option for updating REPLIES_COUNT
    - in Reply model:
    protected static function boot()
        {
            parent::boot();

            static::created(function ($reply){
               $reply->thread->increment('replies_count');
            });

            static::deleted(function ($reply){
                           $reply->thread->decrement('replies_count');
                        });
        }

    - test : $this->assertEquals(1, $thread->fresh()->replies_count);

40. subscribing to thread unit test
    - unit test test a_thread_can_be_subscribed_to
    - testing model behaviour
    - new model ThreadSubscription
    - in Thread, add subscribe, unsubscribe and subscriptions
    -in migration, to cascade delete:
     -> $table->foreign('thread_id')
                ->references('id')
                ->on('threads')
                ->onDelete('cascade');

41. subscribing to thread feature test
    - SubscribeToThreadsTest
    - testing functionalities and paths
    - threadsubscriptioncontroller
    - on subscribe, give notification

42. adding UI for subscription
    - SubscribeButton.vue
    - to allow only 1. subscription, in migrations $table->unique(['thread_id', 'user_id']);
    - send post request for subscr.
    - button has property :class, which is computed based on active property, passed trough threads/show view
    - to add attribute to thread:
     1. protected $appends = ['isSubscribedTo'],
     2. in model create a function
    !!! -> public function getIsSubscribedToAttribute()
        this returns isSubscribedTo attribute !!! returns boolean
    - return $this->subscriptions()->where('user_id', auth()->id())
                  ->exists();
     3.  <subscribe-button :active="{{ $thread->isSubscribedTo  ? 'true' : 'false' }}"></subscribe-button>
        or json_encode($thread->isSubscribedTo)
    - to unsub, check for active status and set axios.  delete or post

43. Laravel Notifications - creating and deleting
    - can be used for mail, database, SMS, also at once
    - create with php artisan notifications:table
    - has methods readNotifications and unreadNotifications built in
    - notification is linked to USER
    -> example: when user leaves a reply
    $subscription->user->notify(new ThreadWasUpdated($this, $reply));
    - php artisan make:notification ThreadWasUpdated
    - it creates Notification folder with classes
    - pass the thread and reply to construct
    - via defines channel, can set 'mail', 'database', '...'
    - toArray defines the content of notification -> what will be saved to data variable in notifications table
    -> saved as json
    - Notifiable trait, out of the box added to User class
    -> with HasDatabaseNotifications and RoutesNotifications
    - then migrate
    - https://laravel.com/docs/5.4/notifications
    - to Thread class, in addReply, also add foreach loop over all subscribers and send them new ThreadWasUpdated
    //create a notification for all subs -> ThreadWasUpdated
            foreach ($this->subscriptions as $subscription) {
                //creating notification for all users but the owner of reply!
                if($reply->user_id !=  $subscription->user_id) {
                    //$this = thread
                    $subscription->user->notify(new ThreadWasUpdated($this, $reply));
                }
            }
    - OR
    $this->subscriptions
                  ->where('user_id', '!=', $reply->user_id)
                  ->each->notify($reply);

    - in code, collection pipeline is used as solution instead of ^
    - notify is created in ThreadSubscription model class

    TESTING
    - php artisan make:test NotificationsTest
    - testing a delete / clear notification after read
    - instead hard deleting, use markAsRead() on notification, that way you can change back to unread

44. refactoring
    - Illuminate\Notifications\DatabaseNotification has classes read, unread, markAsRead...
    - created ModelFactory for notification class -> Illuminate\Notifications\DatabaseNotification

45. VUE user-notifications component
    - add it to navbar view
    - register global component user-notifications in app.js
    - store notifications in var
    - with loop, display notifications
    - @click="markAsRead(notification)


46. creating an event listener for Notifications -> USING EVENTS and LISTENERS
    (najlažji način je da v controllerju ali modelu zraven pokličeš takoj notification)
    - daljši način je z events & listeners
    - use them, when there is too much code in one function, else go easy mode
    - event = something happens, takes parameters and inits them
    - listener = is waiting for an event to happen (in eventserviceprovider),
    -> takes event as param
    - in Thread model, function addReply, add event(new ThreadHasNewReply($this, $reply));
    - in EventServiceProvider add new listener -> when event ThreadHasNewReply is triggered, call listener NotifyThreadSubscribers
    !!! ->  protected $listen = [
              'App\Events\ThreadHasNewReply' => [
                  'App\Listeners\NotifyThreadSubscribers',
              ],
    !!!      ];
    - php artisan event:generate  Generate the missing events and listeners based on registration
    -> creates the ones registered, but not yet created
    - creates \Events and \Listeners
    - event stores the data
    - listener handles the event in function handle(ThreadHasNewReply $event)
    EASY MODE: inside controller, make notifySubscribers($reply) with same logic as handle in listener, and call it
    -> $this->notifySubscribers($reply) instead of event(new ThreadHasNewReply($this, $reply));

47. notification fakes
    - thread_notifies_all_registered_subs_when_a_reply_is_added
    - replace underlying instance with a fake version
    -> Illuminate\Support\Facades\Notification::fake();
    - check if notification was sent, with
    -> Notification::assertSentTo(auth()->user(), ThreadWasUpdated::class);


56. mention users #1
without tests, must fix the migrations factory, have new columns in database
v replycontroller se kliče YouWereMentioned notification class
php artisan make:notification YouWereMentioned

57. mention users #2
    daljši način z events & listeners & notifications
    v Reply modelu znotraj addReply pokliče event
    php artisan event:generate zgenerira listenerje in evente, ki so v eventserviceprovider v $listen, in še ne obstajajo

61. username autocompletion: part 2
npm install at.js --save
npm install jquery.caret --save

copy css file from node_modules/at.js/dist/css/jquery.atwho.css to
./public/css/vendor

import with @yield('header') in app.blade and @section('header') in show.blade
    <link href="{{ asset('css/vendor/jquery.atwho.css') }}" rel="stylesheet">

in vue component

 //for tagging
    import 'jquery.caret';
    import 'at.js';

mounted() {
          $('#body').atwho({
             at: '@',
              delay: 750,
              callbacks: {
                 remoteFilter: function(query, callback) {
//                     $.getJSON('/api/users', {name:query}, function(usernames){
//                         callback(usernames)
//                     })
                 }
              }
          });
        },

ustvari nov route na api/users in php artisan make:controller Api/UserController

64. Images are stored in storage/app/public/avatars
    - to make a link so app can access them from public/storage, do ->
    -> php artisan storage:link
    user has method for image path

66. Trending Threads With Redis
    composer require predis/predis



99. last log in timestamp
    - in EventServiceProvider listen for Login event, trigger Listener
    -> Users/UpdateLastLoggedInAt

9999.
    - Pivot Many to many relacija
    - vmesna tabela, thread belongs to many
    - to retrieve date from pivot table, use ->withTimestamps()

    - Polymorphic Relations
    - se uporablja za npr: komentiranje: uporabnik lahko komentira na sliki ali videu, uporabi se enako tabelo comments
    https://laravel.com/docs/5.4/eloquent-relationships#polymorphic-relations

    foreach($thread->statuses as $thread){
            echo($thread->pivot->created_at);

        //on create, assign status of 1 (nepotrjeno)
        $thread->statuses()->attach(1);

    !!!
    FILTERING: https://laracasts.com/series/eloquent-techniques/episodes/4
    OPCIJA
    if($request->has('dificulty') preveri če je v query URLju difficulty=beginner
    if($request->exists('popular') preveri, če je v queryu ?popular
    !!!

    https://stackoverflow.com/questions/37621807/laravel-5-2-filtering-on-a-custom-attribute-and-then-paginating
    THIS IS PIVOT TABLE SOLUTION, and custom attribute on model thread
    //filter and return all threads for given status, cant get additional filters
        if(request()->has('status')) {
            $statusId = request('status');
            $result = Thread::get()->filter(function($thread) use ($statusId) {
                return $thread->currentStatus == $statusId;
            });

            return $result;
        }

    https://laracasts.com/discuss/channels/general-discussion/best-practices-for-custom-helpers-on-laravel-5?page=2


101. IMPLEMENT ADMIN PANEL - TO CHANGE THREAD STATUSES - DONE

    Administrator ima svoj middleware razred IsAdministrator
    1. php artisan make:middleware IsAdmin
    2. add to routeMiddleware in app/Http/Kernel.php v $routeMiddleware ->
    'admin' => \App\Http\Middleware\IsAdmin::class,
    3. Edit isAdmin file:


100. Task scheduling for 15 + 14 days of voting
    - https://laravel.com/docs/5.4/scheduling

    app/Console/kernel.php
    registriranje v commands, da se lahko kliče iz php artisan ChangeThreadStatuses
    v schedule se doda, kdaj se kliče cronjob
    php artisan make:command ChangeThreadStatuses

    klic v konzoli z : php artisan thread:changeStatus -> določeno glede na ime ($signature v command classu)

    \Command\ChangeThreadStatus se lahko kliče po imenu ^^

        canVote(1 < thread_status_id < 4)
       1 - nepotrjeno
     * 2 - v_razpravi - 15 dni, samo ta ima opcijo spreminjanja predloga
     * 3 - v_glasovanju - 14 dni, nima opcije spreminjanja
     * 4 - posredovano - nima opcije glasovanja
     * 5 - organ_sprejel - nima opcije glasovanja
     * 6 - organ_zavrnil  nima opcije glasovanja
     * 7 - neustrezno - nima opcije glasovanja

100. ON update (editBody), delete all votes and notify all that voted
     https://laravel.com/docs/5.4/events
     Wildcard Event Listener preberi, NotifyThreadSubscribers!!! event je ThreadWasUpdated
     Event Subscribers, listener ki posluša za več eventov

101. Task scheduler ^^ ^^ ^^ ^^
    calculate votes
    votes_count attribute v tabelo, increment boot() enako kokr replies ?
        static::created(function ($vote){
           $vote->thread->increment('votes_count');
        });

        static::deleted(function ($vote){
            $vote->thread->decrement('votes_count');
        });


104. Thread belongs to many tags
    //threads
    //tags -> Model Tag, laravel po defaultu išče tabelo MODEL+s (sicer v modelu določi protected $table = 'imetabele')
    //pivot table - > tag_thread -> po abecednem zaporedju, vzame ednino modelov
    v migrations lahko narediš hkrati tudi schema::create za pivot tabelo, ne rabi novega migration fila
    -> PK oba thread in tag id
    Schema::create('tag_thread', function (Blueprint $table) {
                   $table->unsignedInteger('thread_id');
                   $table->unsignedInteger('tag_id');
                   $table->primary(['thread_id', 'tag_id']);
               });

    - to add an existing tag to thread, do $thread->tags()->attach($tag or $tag->id)
    - to remove : $thread->tags()->detach($tag);

    VUE UPORABA CUSTOM KNIJŽNICE PLUGIN JQUERY ZUNANJA JAVASCRIPT IMPORT
    KORAKI ZA NAMESTITEV ZUNANJE JAVASCRIPT ALI JQUERY KNJIŽNICE V VUE ->jqcloud

    v webpack.mix dodaš .js(.....
    v glavni vue file ( app.js dodaš require('./JQCloud');
    css kopiraš v svoj main.css ali posebej in registriraš v webpack z .css(...
    registriarš novo komponento Vue.component('tag-cloud', require('./cloud/Tagcloud.vue'));
    ustvariš komponento

    v <script> daš kokr ponavadi
    export default {
      //če se sprejme data
      props: ['data'],

      mounted:  function() {
        skripta tukaj
         }

    Prehajanje med statusi smo uredili z Task Scheduling - Cron job. Vsak dan ob 23.55 se sproži \Command\ChangeThreadStatuses razred,
    ki preveri vse objave in ustreznim spremeni status.
    S tem se olajša delo moderatorju.


103. Iskanje po datumu
    za iskanje po datumu smo uporabili https://github.com/charliekassel/vuejs-datepicker, ker bootstrap ne omogoča datepickerja out of the box

104. to je to začni delat na diplomi